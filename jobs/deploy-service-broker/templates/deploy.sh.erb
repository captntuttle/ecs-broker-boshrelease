#!/bin/bash
set -e -x

export PATH="/var/vcap/packages/cf_cli/bin:$PATH"

export SCHEME=https
export DOMAIN=<%= properties.domain %>
export ADMIN_USER=<%= properties.generic_sb.cf.admin_user %>
export ADMIN_PASSWORD=<%= properties.generic_sb.cf.admin_password %>
export API_ENDPOINT=$SCHEME://api.$DOMAIN
export ORG=generic-sb-service
export SPACE=generic-sb-service
export QUOTA=generic-sb-service
export APP_NAME=<%= properties.generic_sb.app_name %>
export APP_URI=<%= properties.generic_sb.app_uri %>
export DRIVER_DOWNLOAD_URL=<%= properties.generic_sb.driver_download_url %>
export APP_DOMAIN=<%= properties.app_domains[0] %>
export ORG_QUOTA=<%= properties.generic_sb.app_push.org_quota %>
export APP_PUSH_TIMEOUT=<%= properties.generic_sb.app_push.timeout %>
export APP_PUSH_MEMORY=<%= properties.generic_sb.app_push.memory %>
export PERSISTENCE_STORE_TYPE=<%= properties.generic_sb.persistence_store_type %>
export PERSISTENCE_STORE_HOST=<%= properties.generic_sb.persistence_store.service_addr %>
export PERSISTENCE_STORE_SID=<%= properties.generic_sb.persistence_store.service_sid %>
export PERSISTENCE_STORE_PARAMS=<%= properties.generic_sb.persistence_store.service_params %>
export PERSISTENCE_STORE_USER=<%= properties.generic_sb.persistence_store.persistence_sb_user %>
export PERSISTENCE_STORE_PASSWD=<%= properties.generic_sb.persistence_store.persistence_sb_password %>
export TARGET_HOST=<%= properties.generic_sb.target_service.service_addr %>
export TARGET_SID=<%= properties.generic_sb.target_service.service_sid %>
export TARGET_PARAMS=<%= properties.generic_sb.target_service.service_params %>
export TARGET_ADMIN_USER=<%= properties.generic_sb.target_service.target_admin_user %>
export TARGET_ADMIN_PASSWD=<%= properties.generic_sb.target_service.target_admin_password %>

export DEFAULT_DB_NAME="generic-sb-mysql"
export SB_APP_ENV="setupServiceBrokerEnv.sh"
export SB_APP_CONFIG="config/application.properties"
export EXPLODED_APP_FOLDER="exploded-app-contents"

export CF_HOME=`pwd`/home/cf
mkdir -p $CF_HOME

# IMPORTANT -- CHANGE ME for real usage !!!!!!!
# Change the APP_PREFIX_NAME to point to the correct jar
# For now, go with oracle-service-broker if custom persistence store type is selected
# otherwise, go with the spring-cloud-service-broker for testing...
if [ "${PERSISTENCE_STORE_TYPE}" == "custom" ]; then
  APP_PREFIX_NAME=oracle-service-broker
else
  APP_PREFIX_NAME=spring-cloud-service-broker
fi

# Modify extension type for App file
EXTENSION_TYPE="jar"
TARGET_APP=${APP_PREFIX_NAME}.${EXTENSION_TYPE}
JOB_NAME=deploy-service-broker
PACKAGE_NAME=generic-service-broker
PACKAGE_PATH=/var/vcap/packages/$PACKAGE_NAME

RUN_DIR=/var/vcap/sys/run/$JOB_NAME
LOG_DIR=/var/vcap/sys/log/$JOB_NAME
PIDFILE=${RUN_DIR}/pid

export DEBUG_LOG=$LOG_DIR/deploy-service-broker.log

mkdir -p $RUN_DIR $LOG_DIR
chown -R vcap:vcap $RUN_DIR $LOG_DIR

function log_debug() {
  echo `date` $1 >> $DEBUG_LOG
}

function authenticate_and_target() {
  cf api $API_ENDPOINT <% if properties.ssl.skip_cert_verify %>--skip-ssl-validation<% end %>
  cf auth $ADMIN_USER $ADMIN_PASSWORD
  cf create-org $ORG
  cf target -o $ORG
  cf create-space $SPACE
  cf target -s $SPACE
}

function create_quota() {
cf create-quota $QUOTA -m ${ORG_QUOTA}m -r 10 -s 10
cf update-quota $QUOTA -m ${ORG_QUOTA}m -r 10 -s 10 --disallow-paid-service-plans
  cf set-quota $ORG $QUOTA
}

function provision_db() {
  db_plan=`cf marketplace | grep p-mysql | awk '{ print $2 }' | sed 's/,//g'`
  cf create-service p-mysql $db_plan $DEFAULT_DB_NAME
}

function bind_db() {
  cf bind-service $APP_NAME $DEFAULT_DB_NAME
}

function restart_app() {
#  CF_TRACE=true cf restage $APP_NAME
  CF_TRACE=true cf restart $APP_NAME
  if [ "$?" -ne "0" ]; then
    log_debug "App start failed..."
    cf logs $APP_NAME --recent
  fi
}

function add_env_vars() {
#  cf set-env $APP_NAME BASIC_AUTH_PASSWORD <%= properties.generic_sb.broker.password %>
#  cf set-env $APP_NAME BASIC_AUTH_USERNAME <%= properties.generic_sb.broker.user %>
#  cf set-env $APP_NAME ENCRYPTION_KEY <%= properties.generic_sb.encryption_key %>
#  cf set-env $APP_NAME UAA_CLIENT_ID generic-sb-service
#  cf set-env $APP_NAME UAA_CLIENT_SECRET <%= properties.uaa.clients.generic_sb.secret %>
  cf set-env $APP_NAME UAA_HOST $SCHEME://uaa.$DOMAIN
  cf set-env $APP_NAME CC_HOST $API_ENDPOINT
  cf set-env $APP_NAME LOGIN_HOST $SCHEME://login.$DOMAIN
  cf set-env $APP_NAME ROOT "\$HOME"
  cf set-env $APP_NAME SCHEME $SCHEME
  cf set-env $APP_NAME VERIFY_SSL <%= !properties.ssl.skip_cert_verify %>

  # Add app specific env variables using the setup script definition
  add_parameterized_env_vars
}

function add_parameterized_env_vars() {
  pushd $PACKAGE_PATH
  # Source the environment variables before doing a cf set-env using the variable name
  source $SB_APP_ENV
  cat $SB_APP_ENV | grep -v "^#" | while read env_var_entry
  do
    key=`echo $env_var_entry | sed -e 's/export //;s/=.*//';`
    formatted_env_var=`env | grep $key | sed -e 's/=/ /g';`
    cf set-env $APP_NAME ${formatted_env_var}
  done
}

function modify_app() {
  pushd $PACKAGE_PATH

  if [ "${DRIVER_DOWNLOAD_URL}xxx" != "xxx" ]; then

    mkdir -p ${EXPLODED_APP_FOLDER}

    cd ${EXPLODED_APP_FOLDER}
    unzip ../lib/${APP_PREFIX_NAME}*.${EXTENSION_TYPE}

    # Expecting any drivers to go into the lib folder to be loaded by the java application
    mkdir -p lib
    curl -k ${DRIVER_DOWNLOAD_URL} -o lib/driver.jar
    if [ "$?" == "0" ]; then
      log_debug "Successfully downloaded Driver"
    else
      log_debug "Unable to download Driver from url: ${DRIVER_DOWNLOAD_URL}"
    fi

    zip -r ${PACKAGE_PATH}/${TARGET_APP} *
  else
    cp ${PACKAGE_PATH}/lib/${APP_PREFIX_NAME}*.${EXTENSION_TYPE}  ${PACKAGE_PATH}/${TARGET_APP}
  fi

  popd
}

function push_app() {
  pushd $PACKAGE_PATH
    mkdir -p /var/vcap/data/tmp
    export TMPDIR=/var/vcap/data/tmp
    CF_TRACE=true cf push $APP_NAME -p ${PACKAGE_PATH}/${TARGET_APP} -n ${APP_URI} -t ${APP_PUSH_TIMEOUT} -m ${APP_PUSH_MEMORY}m --no-start
    if [ "$?" -ne "0" ]; then
      log_debug "App push failed..."
      cf logs $APP_NAME --recent
    fi
  popd
}

# Use the environment variable bindings approach rather than modifying app contents with service endpoints
#function update_app_with_store_and_target() {
#  pushd $PACKAGE_PATH
#    mkdir -p /var/vcap/data/tmp
#
#    cp -r templates/config /var/vcap/data/tmp
#    if [ "${PERSISTENCE_STORE_TYPE}" == "custom" ]; then
#      sed -i.bak "s/DB_HOST_ADDR/${PERSISTENCE_STORE_HOST}/g;    \
#            s/DB_SID/${PERSISTENCE_STORE_SID}/g;                 \
#            s/DB_PARAMS/${PERSISTENCE_STORE_PARAMS}/g;           \
#            s/DB_USER/${PERSISTENCE_STORE_USER}/g;               \
#            s/DB_PASSWD/${PERSISTENCE_STORE_PASSWD}/g"           \
#            /var/vcap/data/tmp/${SB_APP_CONFIG}
#    fi
#
#    sed -i.bak "s/TARGET_HOST_ADDR/${TARGET_HOST}/g;             \
#            s/TARGET_SID/${TARGET_SID}/g;                        \
#            s/TARGET_PARAMS/${TARGET_PARAMS}/g;                  \
#            s/TARGET_ADMIN_USER/${TARGET_ADMIN_USER}/g;          \
#            s/TARGET_ADMIN_PASSWD/${TARGET_ADMIN_PASSWD}/g"      \
#            /var/vcap/data/tmp/${SB_APP_CONFIG}
#
#    # Dealing with a Jar file here, so unzip and copy over the updated app configs
#    mkdir -p $PACKAGE_PATH/${EXPLODED_APP_FOLDER}
#    cd $PACKAGE_PATH/${EXPLODED_APP_FOLDER}
#    unzip ../lib/${APP_PREFIX_NAME}*jar
#    cp /var/vcap/data/tmp/${SB_APP_CONFIG} ${SB_APP_CONFIG}
#  popd
#}

function update_env_variable_script() {
  pushd $PACKAGE_PATH
    mkdir -p /var/vcap/data/tmp

    cp -r templates/setupServiceBrokerEnv.sh /var/vcap/data/tmp
      sed -i.bak "s/DB_HOST_ADDR/${PERSISTENCE_STORE_HOST}/g;    \
            s/DB_SID/${PERSISTENCE_STORE_SID}/g;                 \
            s/DB_PARAMS/${PERSISTENCE_STORE_PARAMS}/g;           \
            s/DB_USER/${PERSISTENCE_STORE_USER}/g;               \
            s/DB_PASSWD/${PERSISTENCE_STORE_PASSWD}/g;           \
            s/TARGET_HOST_ADDR/${TARGET_HOST}/g;                 \
            s/TARGET_SID/${TARGET_SID}/g;                        \
            s/TARGET_PARAMS/${TARGET_PARAMS}/g;                  \
            s/TARGET_ADMIN_USER/${TARGET_ADMIN_USER}/g;          \
            s/TARGET_ADMIN_PASSWD/${TARGET_ADMIN_PASSWD}/g"      \
            /var/vcap/data/tmp/${SB_APP_ENV}

    cp /var/vcap/data/tmp/${SB_APP_ENV} ${SB_APP_ENV}
  popd
}

function register_plans() {
  pushd $PACKAGE_PATH
    mkdir -p /var/vcap/data/tmp
    # Sleep for a bit so the app is up
    sleep 30
    app_endpoint=http://${APP_URI}.${DOMAIN}
    app_catalog_url=${app_endpoint}/v2/catalog
    catalog_output=`curl -X GET ${app_catalog_url} 2>/dev/null`
    log_debug "Service Broker App Catalog output : $catalog_output"

    service_id=`echo $catalog_output | sed -e 's/"//g'  | sed -e "s/name:/\nname:/g" | grep "id:" | grep services | sed -e "s/^.*id://g;s/,//" `
    #plan_id=`echo $catalog_output | sed -e 's/"//g'  | sed -e "s/name:/\nname:/g" | grep "id:" | grep plans | sed -e "s/^.*id://g;s/,//" `
    log_debug "Catalog Service Id : $service_id "

    <% if properties.generic_sb.on_demand_service_plans %>
      <%  p("generic_sb.on_demand_service_plans").each do |plan|
             plan_name=plan['plan_name']
             plan_descrp=plan['plan_description']
             plan_details=plan['plan_details'].gsub('\n','')
      %>
        export PLAN_ID=<%="#{plan_name}"%>
        export PLAN_DESCRP=<%="#{plan_descrp}"%>
        export PLAN_DETAILS='<%="#{plan_details}"%>'
        log_debug "Service plan name ${PLAN_ID}, described as ${PLAN_DESCRP} and details: ${PLAN_DETAILS}"

        bullets_name_value_multiline=`echo $PLAN_DETAILS | sed -e "s/;/,/g" | awk -F ":" '{print "\"" $1 "\" : \"" $2 "\", " }' `
        bullets_value_descrp_singleline=`echo $PLAN_DETAILS | sed -e "s/;/,\n/g;"  | awk -F ":" '{print "\""$2  $3"\"" }' | sed -e 's/,"/",/g' `

        cat > /var/vcap/data/tmp/${PLAN_ID}.service_plan.json << EOF
{
  "name" : "$PLAN_ID",
  "description" : "$PLAN_DESCRP",
  "metadata" : {
     "name" : "$PLAN_ID",
     "displayName" : "$PLAN_ID",
     "description" : "$PLAN_DESCRP",
     $bullets_name_value_multiline
     "bullets" : [
        "$PLAN_ID $PLAN_DESCRP",
        $bullets_value_descrp_singleline ]
   }
}
EOF

         log_debug "Copied over default service plan file template with ${PLAN_ID} and updated it"
         new_plan=`cat /var/vcap/data/tmp/${PLAN_ID}.service_plan.json`
         log_debug "Contents of the plan: ${new_plan} "
         plan_creation_output=`curl ${app_catalog_url}/services/${service_id}/plans -X POST -H "Content-Type:application/json" -d @/var/vcap/data/tmp/${PLAN_ID}.service_plan.json `
         log_debug "Service Plan created!!"
         log_debug "Service Plan details: ${plan_creation_output}"
       <% end %>
    <% end %>

  popd
}

log_debug Complete deployment manifest : <%= properties.generic_sb %>
cf -v
authenticate_and_target
log_debug "Authenticated and targeted cf!!"
create_quota
#update_app_with_store_and_target
update_env_variable_script
log_debug "Updated env variable script for app"

if [ "${PERSISTENCE_STORE_TYPE}" == "mysql" ]; then
  provision_db
  log_debug "Provisioned Db using mysql for app"
fi
log_debug "Pushing app"
if [ "${PERSISTENCE_STORE_TYPE}" == "mysql" ]; then
  bind_db
fi

modify_app
log_debug "Modified app"
push_app
log_debug "Pushed app"
add_env_vars
log_debug "Updated env variable for app in cf"
if [ "${PERSISTENCE_STORE_TYPE}" == "mysql" ]; then
  bind_db
fi
log_debug "Starting app in cf"
restart_app
log_debug "App started!!"
register_plans
